diff -ruN linux-3.16.0_orig/arch/x86/syscalls/syscall_32.tbl linux-3.16.0/arch/x86/syscalls/syscall_32.tbl
--- linux-3.16.0_orig/arch/x86/syscalls/syscall_32.tbl	2019-09-29 15:19:25.067281999 +0530
+++ linux-3.16.0/arch/x86/syscalls/syscall_32.tbl	2019-09-29 17:27:09.547281999 +0530
@@ -361,3 +361,4 @@
 352	i386	sched_getattr		sys_sched_getattr
 353	i386	renameat2		sys_renameat2
 354	i386	seccomp			sys_seccomp
+355	i386	sh_task_info		sys_sh_task_info
diff -ruN linux-3.16.0_orig/arch/x86/syscalls/syscall_64.tbl linux-3.16.0/arch/x86/syscalls/syscall_64.tbl
--- linux-3.16.0_orig/arch/x86/syscalls/syscall_64.tbl	2019-09-29 15:19:25.067281999 +0530
+++ linux-3.16.0/arch/x86/syscalls/syscall_64.tbl	2019-09-29 17:24:52.891281999 +0530
@@ -362,3 +362,4 @@
 542	x32	getsockopt		compat_sys_getsockopt
 543	x32	io_setup		compat_sys_io_setup
 544	x32	io_submit		compat_sys_io_submit
+545	64	sh_task_info		sys_sh_task_info
diff -ruN linux-3.16.0_orig/include/linux/syscalls.h linux-3.16.0/include/linux/syscalls.h
--- linux-3.16.0_orig/include/linux/syscalls.h	2019-09-29 15:19:26.295281999 +0530
+++ linux-3.16.0/include/linux/syscalls.h	2019-09-29 17:30:39.755281999 +0530
@@ -868,4 +868,5 @@
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
 asmlinkage long sys_seccomp(unsigned int op, unsigned int flags,
 			    const char __user *uargs);
+asmlinkage long sys_sh_task_info(int pid, char *filename);
 #endif
diff -ruN linux-3.16.0_orig/Makefile linux-3.16.0/Makefile
--- linux-3.16.0_orig/Makefile	2019-09-29 15:19:25.483281999 +0530
+++ linux-3.16.0/Makefile	2019-09-29 17:23:10.651281999 +0530
@@ -850,7 +850,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN linux-3.16.0_orig/sh_task_info/Makefile linux-3.16.0/sh_task_info/Makefile
--- linux-3.16.0_orig/sh_task_info/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.16.0/sh_task_info/Makefile	2019-09-29 17:19:20.191281999 +0530
@@ -0,0 +1 @@
+obj-y := sh_task_info.o
diff -ruN linux-3.16.0_orig/sh_task_info/sh_task_info.c linux-3.16.0/sh_task_info/sh_task_info.c
--- linux-3.16.0_orig/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.16.0/sh_task_info/sh_task_info.c	2019-09-29 17:19:20.191281999 +0530
@@ -0,0 +1,105 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/fcntl.h>
+#include <asm/uaccess.h>
+
+asmlinkage long sys_sh_task_info(int pid, char *filename)
+{
+	struct task_struct *task;
+	struct file *file;
+	loff_t pos = 0;
+	int fd;
+
+	mm_segment_t old_fs = get_fs();
+	set_fs(KERNEL_DS);
+
+//	char* strcat1(char* , char*);
+
+	fd = sys_open(filename, O_WRONLY|O_CREAT, 0644);
+	int flag = 0;
+	for_each_process(task)
+	{
+		if(task->pid == pid)
+		{
+			flag = 1;
+			printk(KERN_ALERT "Process: %s\n \
+				PID_Number: %ld\n \
+				Process State: %ld\n \
+				Priority: %ld\n \
+				RT_Priority: %ld\n \
+				Static Priority: %ld\n \
+				Normal Priority: %ld\n ",
+				task->comm, \
+				task_pid_nr(task), \
+				task->state, \
+				task->prio, \
+				task->rt_priority, \
+				task->static_prio, \
+				task->normal_prio \
+			);
+			char data[500];
+//			data = strcat1(data,task->comm);
+//			data = strcat1(data,task_pid_nr(task));
+//			data = strcat1(data,task->state);
+//			data = strcat1(data,task->prio);
+//			data = strcat1(data,task->rt_priority);
+//			data = strcat1(data,task->static_prio);
+//			data = strcat1(data,task->normal_prio);
+			sprintf(data,"Process: %s\n \
+				PID_Number: %ld\n \
+				Process State: %ld\n \
+				Priority: %ld\n \
+				RT_Priority: %ld\n \
+				Static Priority: %ld\n \
+				Normal Priority: %ld\n",
+				task->comm, \
+				task_pid_nr(task), \
+				task->state, \
+				task->prio, \
+				task->rt_priority, \
+				task->static_prio, \
+				task->normal_prio \
+			);
+			if(fd >= 0)
+			{
+				sys_write(fd, data, strlen(data));
+				file = fget(fd);
+				if(file)
+				{
+					vfs_write(file, data, strlen(data), &pos);
+					fput(file);
+				}
+			sys_close(fd);
+			}
+			else
+			{
+				return -2;
+			}
+		}
+	}
+	set_fs(old_fs);
+	if(flag == 0)
+	{
+		return -1;
+	}
+	return 0;
+}
+//char * strcat1(char *dest, char *src)
+//{
+//	int i,j;
+//	for(i = 0; dest[i] != '\0' ; i++);
+//
+//	for(j = 0; src[j] != '\0' ; j++)
+//	{
+//		dest[i+j] = src[j];
+//	}
+//	dest[i+j] = '\n';
+//	dest[i+j+1] = '\0';
+//
+//	return dest;
+//}
